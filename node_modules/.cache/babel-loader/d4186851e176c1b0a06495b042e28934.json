{"ast":null,"code":"var _jsxFileName = \"E:\\\\work-station\\\\2020.2.27.rechart-project\\\\Git-rechart-popup-form\\\\src\\\\App.js\";\nimport React, { PureComponent } from \"react\";\nimport $ from \"jquery\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\"; // rechart initial data\n\nconst data = [{\n  date: \"02-25\",\n  one: 4000,\n  two: 2400\n}, {\n  date: \"02-26\",\n  one: 3000,\n  two: 1398\n}, {\n  date: \"02-27\",\n  one: 2000,\n  two: 9800\n}, {\n  date: \"02-28\",\n  one: 2780,\n  two: 3908\n}, {\n  date: \"03-01\",\n  one: 1890,\n  two: 4800\n}, {\n  date: \"03-02\",\n  one: 2390,\n  two: 3800\n}, {\n  date: \"03-03\",\n  one: 3490,\n  two: 4300\n}];\nconst date_data = [{\n  date: \"02-25\",\n  message_id: 1,\n  person: \"Andrew\",\n  message: \"this is test\"\n}, {\n  date: \"02-26\",\n  message_id: 2,\n  person: \"Ivan\",\n  message: \"this is test\"\n}, {\n  date: \"03-02\",\n  message_id: 3,\n  person: \"Alex\",\n  message: \"this is test\"\n}]; // message-icon\n\nconst path = 'm74.414 480.548h-36.214l25.607-25.607c13.807-13.807 22.429-31.765 24.747-51.246-59.127-38.802-88.554-95.014-88.554-153.944 0-108.719 99.923-219.203 256.414-219.203 165.785 0 254.682 101.666 254.682 209.678 0 108.724-89.836 210.322-254.682 210.322-28.877 0-59.01-3.855-85.913-10.928-25.467 26.121-59.973 40.928-96.087 40.928z';\n\nclass App extends PureComponent {\n  // constructor\n  constructor(props) {\n    super(props);\n\n    this.renderCustomAxisTick = ({\n      x,\n      y,\n      payload\n    }) => {\n      let including_message = false;\n      var message_id = 0;\n      var message = {};\n      date_data.forEach(element => {\n        if (element.date === payload.value) {\n          including_message = true;\n          message_id = element.message_id;\n          message = element;\n        }\n      });\n\n      if (including_message) {\n        let className = 'message-active_' + message_id;\n        return React.createElement(\"svg\", {\n          x: x - 12,\n          y: y + 4,\n          width: 24,\n          height: 24,\n          viewBox: \"0 0 512 512\",\n          fill: \"#666\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, React.createElement(\"path\", {\n          className: className,\n          d: path,\n          onClick: () => this.handleClick(message, x, y),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"text\", {\n          x: x - 20,\n          y: y + 20,\n          width: 124,\n          height: 24,\n          fill: \"#666\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, React.createElement(\"tspan\", {\n          className: \"message-inactive\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, payload.value));\n      }\n    };\n\n    this.handleClick = (message, x, y) => {\n      console.log(message);\n      console.log(x);\n      console.log(y);\n      this.setState({\n        mouseX: x,\n        mouseY: y\n      });\n      console.log(\"here is message click event\");\n    };\n\n    this.state = {\n      xAxis_value: \"\",\n      message_data: {},\n      mouseX: 0,\n      mouseY: 0\n    };\n  } // message icon. icon has been shown when date has message data. when click icon, it shows message data of that date\n\n\n  // when click rechart, getting pointer data of rechart\n  showTooltipData(data) {\n    if (!data) {\n      return false;\n    }\n\n    this.setState({\n      xAxis_value: data.activeLabel\n    }); // open and close popup modal\n\n    $(\".overlay\").addClass(\"is-open\");\n    $(\".close-btn\").click(function () {\n      $(\".overlay\").removeClass(\"is-open\");\n    });\n  } // rendering rechart and popup modal\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(LineChart, {\n      width: 800,\n      height: 500,\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      onClick: this.showTooltipData.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(XAxis, {\n      dataKey: \"date\",\n      tick: this.renderCustomAxisTick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(Tooltip, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(Legend, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"one\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"two\",\n      stroke: \"#82ca9d\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(MessageNote, {\n      marginX: this.mouseX,\n      marginY: this.mouseY,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(PopupModal, {\n      date: this.state.xAxis_value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }));\n  }\n\n} // popup modal component. if you want to change modal, you can change this template.\n\n\nfunction PopupModal(props) {\n  return React.createElement(\"div\", {\n    className: \"overlay\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"modal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"close-btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"close black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"text-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"capture-date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, props.date)), React.createElement(\"form\", {\n    id: \"popup-form\",\n    className: \"capture-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"textarea\", {\n    name: \"date\",\n    className: \"date\",\n    defaultValue: props.date,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), React.createElement(\"textarea\", {\n    className: \"textarea\",\n    row: \"10\",\n    name: \"message\",\n    placeholder: \"Start typing here\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"send-message\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"POST\"))));\n}\n\nfunction MessageNote(props) {\n  let style = \"\";\n\n  if (props.mouseX || props.mouseY) {\n    let margin_left = \"margin-left:\" + props.mouseX + \"em;\";\n    let margin_right = \"margin-right:\" + props.mouseY + \"em;\";\n    let style = margin_left + margin_right;\n    console.log(style);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"message_note\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"this is test\");\n}\n\nexport default App;","map":{"version":3,"sources":["E:/work-station/2020.2.27.rechart-project/Git-rechart-popup-form/src/App.js"],"names":["React","PureComponent","$","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","data","date","one","two","date_data","message_id","person","message","path","App","constructor","props","renderCustomAxisTick","x","y","payload","including_message","forEach","element","value","className","handleClick","console","log","setState","mouseX","mouseY","state","xAxis_value","message_data","showTooltipData","activeLabel","addClass","click","removeClass","render","top","right","left","bottom","bind","r","PopupModal","MessageNote","style","margin_left","margin_right"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport $ from \"jquery\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend\n} from \"recharts\";\n\n// rechart initial data\nconst data = [\n  { date: \"02-25\", one: 4000, two: 2400 },\n  { date: \"02-26\", one: 3000, two: 1398 },\n  { date: \"02-27\", one: 2000, two: 9800 },\n  { date: \"02-28\", one: 2780, two: 3908 },\n  { date: \"03-01\", one: 1890, two: 4800 },\n  { date: \"03-02\", one: 2390, two: 3800 },\n  { date: \"03-03\", one: 3490, two: 4300 }\n];\n\nconst date_data = [\n  { date: \"02-25\", message_id: 1, person: \"Andrew\", message: \"this is test\" },\n  { date: \"02-26\", message_id: 2, person: \"Ivan\", message: \"this is test\" },\n  { date: \"03-02\", message_id: 3, person: \"Alex\", message: \"this is test\" }\n]\n\n// message-icon\nconst path = 'm74.414 480.548h-36.214l25.607-25.607c13.807-13.807 22.429-31.765 24.747-51.246-59.127-38.802-88.554-95.014-88.554-153.944 0-108.719 99.923-219.203 256.414-219.203 165.785 0 254.682 101.666 254.682 209.678 0 108.724-89.836 210.322-254.682 210.322-28.877 0-59.01-3.855-85.913-10.928-25.467 26.121-59.973 40.928-96.087 40.928z';\n  \n\nclass App extends PureComponent {\n  // constructor\n  constructor(props) {\n    super(props);\n    this.state = { xAxis_value: \"\", message_data:{}, mouseX:0, mouseY:0 };\n  }\n\n  // message icon. icon has been shown when date has message data. when click icon, it shows message data of that date\n  renderCustomAxisTick = ({ x, y, payload }) => {\n    let including_message = false;\n    var message_id = 0;\n    var message = {}\n    date_data.forEach(element => {\n      if(element.date === payload.value){\n        including_message = true;\n        message_id = element.message_id;\n        message = element;\n      }\n    });\n    if(including_message){\n      let className = 'message-active_' + message_id;\n      return (\n        <svg x={x - 12} y={y + 4} width={24} height={24} viewBox=\"0 0 512 512\" fill=\"#666\">\n          <path className={className} d={path} onClick={() => this.handleClick(message, x, y)}/>\n        </svg>\n      );\n    }else{\n      return (\n        <text x={x -20} y={y+20} width={124} height={24} fill=\"#666\">\n          <tspan className=\"message-inactive\">\n            {payload.value}\n          </tspan>\n        </text>\n      )\n    }\n  };\n\n  handleClick = (message, x, y) => {\n    console.log(message);\n    console.log(x);\n    console.log(y);\n    this.setState({\n      mouseX: x,  mouseY: y\n    });\n    console.log(\"here is message click event\");\n    \n  }\n\n  // when click rechart, getting pointer data of rechart\n  showTooltipData(data) {\n    if(!data){\n      return false;\n    }\n    this.setState({\n      xAxis_value: data.activeLabel      \n    });\n    // open and close popup modal\n    $(\".overlay\").addClass(\"is-open\");\n\n    $(\".close-btn\").click(function() {\n      $(\".overlay\").removeClass(\"is-open\");\n    });\n  }\n\n  // rendering rechart and popup modal\n  render() {\n    return (\n      <div>\n        <LineChart\n          width={800}\n          height={500}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          }}\n          onClick={this.showTooltipData.bind(this)}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" tick ={this.renderCustomAxisTick.bind(this)}/>\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"one\"\n            stroke=\"#8884d8\"\n            activeDot={{ r: 8 }}\n          />\n          <Line type=\"monotone\" dataKey=\"two\" stroke=\"#82ca9d\" />\n        </LineChart>\n        <MessageNote marginX={this.mouseX} marginY={this.mouseY}/>\n        <PopupModal date={this.state.xAxis_value} />\n      </div>\n    );\n  }\n}\n\n// popup modal component. if you want to change modal, you can change this template.\nfunction PopupModal(props) {\n  return (\n    <div className=\"overlay\">\n      <div className=\"modal\">\n        <div className=\"close-btn\">\n          <span className=\"close black\"></span>\n        </div>\n        <div className=\"text-box\">\n          <p className=\"capture-date\">\n           {props.date}\n          </p>\n        </div>\n        <form id=\"popup-form\" className=\"capture-form\">\n          <textarea name='date' className=\"date\" defaultValue ={props.date}></textarea>\n          <textarea\n            className=\"textarea\"\n            row=\"10\"\n            name=\"message\"\n            placeholder=\"Start typing here\"\n            required\n          ></textarea>\n          <button type=\"submit\" className=\"send-message\">\n            POST\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\nfunction MessageNote(props){\n  let style = \"\";\n  if(props.mouseX||props.mouseY){\n    let margin_left = \"margin-left:\"+props.mouseX+\"em;\";\n    let margin_right = \"margin-right:\"+props.mouseY+\"em;\";\n    let style = margin_left + margin_right;\n    console.log(style);\n  }\n  \n  \n  return(\n    <div className=\"message_note\" >\n      this is test\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}